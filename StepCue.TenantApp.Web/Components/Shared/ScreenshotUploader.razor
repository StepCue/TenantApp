@using Microsoft.AspNetCore.Components.Forms
@using StepCue.TenantApp.Web.Services
@inject FileService FileService

<div class="screenshot-uploader">
    <InputFile id="fileInput" OnChange="OnFileSelected" hidden accept=".jpg,.jpeg,.png" />
    
    @if (ImageData != null && ImageData.Length > 0)
    {
        <MudPaper Height="200px" Width="100%" Outlined="true" Class="d-flex flex-column align-center justify-center position-relative">
            <img src="@GetImageDataUrl()" alt="Uploaded screenshot" style="max-width: 100%; max-height: 180px; object-fit: contain;" />
            <MudIconButton Icon="@Icons.Material.Filled.Clear" 
                          Color="Color.Error" 
                          Size="Size.Small" 
                          OnClick="ClearImage"
                          Style="position: absolute; top: 5px; right: 5px; background-color: rgba(255,255,255,0.8);">
            </MudIconButton>
        </MudPaper>
        <MudButton Variant="Variant.Outlined" 
                  Color="Color.Primary" 
                  OnClick="BrowseFiles"
                  Class="mt-2 w-100">
            Change Screenshot
        </MudButton>
    }
    else
    {
        <MudPaper Height="200px" Width="100%" Outlined="true" Class="d-flex flex-column align-center justify-center">
            <MudIcon Icon="@Icons.Material.Filled.Image" Size="Size.Large" Class="mb-2" />
            <MudText Typo="Typo.body1">No screenshot uploaded</MudText>
            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Primary" 
                      OnClick="BrowseFiles"
                      Class="mt-3">
                Upload Screenshot
            </MudButton>
        </MudPaper>
    }
</div>

@code {
    [Parameter]
    public byte[]? ImageData { get; set; }
    
    [Parameter]
    public EventCallback<byte[]?> ImageDataChanged { get; set; }
    
    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var imageData = await FileService.ProcessScreenshotAsync(file);
            ImageData = imageData;
            await ImageDataChanged.InvokeAsync(imageData);
        }
    }
    
    private async Task BrowseFiles()
    {
        // Programmatically click the hidden input file element
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('fileInput').click()");
    }
    
    private async Task ClearImage()
    {
        ImageData = null;
        await ImageDataChanged.InvokeAsync(null);
    }
    
    private string? GetImageDataUrl()
    {
        return ImageData != null ? FileService.GetImageDataUrl(ImageData) : null;
    }
    
    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
    
    private IJSObjectReference? document;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            document = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "document");
        }
    }
}