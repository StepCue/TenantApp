@page "/plans/new"
@page "/plans/{Id:int}"
@using StepCue.TenantApp.Core.Services
@using StepCue.TenantApp.Data.Models.Planning
@using StepCue.TenantApp.Web.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject PlanService PlanService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@implements IAsyncDisposable

<style>
    .highlighted-step {
        background-color: var(--mud-palette-primary-lighten) !important;
        border: 2px solid var(--mud-palette-primary) !important;
        border-radius: 8px;
    }
    
    .step-table {
        min-height: 300px;
    }
    
    .inline-edit {
        background: transparent;
        border: none;
        outline: none;
        width: 100%;
        padding: 4px;
    }
    
    .inline-edit:focus {
        background: var(--mud-palette-surface);
        border: 1px solid var(--mud-palette-primary);
        border-radius: 4px;
    }
</style>

<PageTitle>@(_isNewPlan ? "Create Plan" : "Edit Plan")</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">@(_isNewPlan ? "Create Plan" : "Edit Plan")</MudText>
    
    @if (_isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudForm Model="@_plan" @ref="_form">
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudTextField @bind-Value="_plan.Name" Label="Plan Name" Required="true" RequiredError="Plan name is required" />
                    
                    <MudText Typo="Typo.h6" Class="mt-4">Members</MudText>
                    <MemberManager Members="@_plan.Members" />
                    
                    <MudText Typo="Typo.h6" Class="mt-4">Steps</MudText>
                    
                    @if (_plan.Members.Any())
                    {
                        <MudPaper Class="pa-2 mt-2 mb-2" Elevation="1">
                            <MudSelect T="PlanMember" @bind-Value="_selectedMemberToHighlight" 
                                       Label="Highlight steps for member" 
                                       Variant="Variant.Outlined" 
                                       Clearable="true"
                                       ToStringFunc="@(m => string.IsNullOrEmpty(m?.Name) ? "Unnamed Member" : m.Name)">
                                @foreach (var member in _plan.Members)
                                {
                                    var memberName = string.IsNullOrEmpty(member.Name) ? "Unnamed Member" : member.Name;
                                    <MudSelectItem T="PlanMember" Value="@member">@memberName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudPaper>
                    }
                    
                    <MudPaper Class="pa-4 mt-2" Elevation="0">
                        <div Class="d-flex justify-space-between align-center mb-3">
                            <MudText Typo="Typo.h6">Steps Table</MudText>
                            <MudMenu EndIcon="@Icons.Material.Filled.Visibility" 
                                    Label="Column Visibility" 
                                    Variant="Variant.Outlined" 
                                    Size="Size.Small">
                                <MudMenuItem>
                                    <MudCheckBox T="bool" @bind-Checked="_showOrderColumn" 
                                                Label="Order" 
                                                Size="Size.Small" />
                                </MudMenuItem>
                                <MudMenuItem>
                                    <MudCheckBox T="bool" @bind-Checked="_showNameColumn" 
                                                Label="Name" 
                                                Size="Size.Small" />
                                </MudMenuItem>
                                <MudMenuItem>
                                    <MudCheckBox T="bool" @bind-Checked="_showMembersColumn" 
                                                Label="Assigned Members" 
                                                Size="Size.Small" />
                                </MudMenuItem>
                                <MudMenuItem>
                                    <MudCheckBox T="bool" @bind-Checked="_showActionsColumn" 
                                                Label="Actions" 
                                                Size="Size.Small" />
                                </MudMenuItem>
                            </MudMenu>
                        </div>
                        
                        <MudTable @ref="_table" 
                                 Items="@_orderedSteps" 
                                 Hover="true" 
                                 Breakpoint="Breakpoint.Sm"
                                 Class="step-table"
                                 CanCancelEdit="true"
                                 CommitEditTooltip="Save changes"
                                 CancelEditTooltip="Cancel"
                                 RowEditPreview="BackupItem"
                                 RowEditCancel="ResetItemToOriginalValues"
                                 RowEditCommit="ItemHasBeenCommitted"
                                 IsEditRowSwitchingBlocked="false"
                                 ApplyButtonPosition="TableApplyButtonPosition.End"
                                 EditButtonPosition="TableEditButtonPosition.End">
                                <ColGroup>
                                    <col style="width: 60px;" />
                                    <col />
                                    <col style="width: 200px;" />
                                    <col style="width: 120px;" />
                                    <col style="width: 120px;" />
                                </ColGroup>
                                <HeaderContent>
                                    @if (_showOrderColumn)
                                    {
                                        <MudTh>Order</MudTh>
                                    }
                                    @if (_showNameColumn)
                                    {
                                        <MudTh>Name</MudTh>
                                    }
                                    @if (_showMembersColumn)
                                    {
                                        <MudTh>Assigned Members</MudTh>
                                    }
                                    @if (_showActionsColumn)
                                    {
                                        <MudTh>Actions</MudTh>
                                        <MudTh></MudTh>
                                    }
                                </HeaderContent>
                                <RowTemplate>
                                    @{
                                        var isHighlighted = IsStepHighlighted(context);
                                        var rowClass = isHighlighted ? "highlighted-step" : "";
                                    }
                                    @if (_showOrderColumn)
                                    {
                                        <MudTd DataLabel="Order" Class="@rowClass">
                                            <div style="display: flex; align-items: center; gap: 8px;">
                                                <MudIconButton Icon="@Icons.Material.Filled.DragIndicator" 
                                                              Size="Size.Small" 
                                                              Style="cursor: move;" 
                                                              @ondragstart="@((DragEventArgs e) => OnDragStart(e, context))"
                                                              @ondrop="@((DragEventArgs e) => OnDrop(e, context))"
                                                              @ondragover="@OnDragOver"
                                                              @ondragenter="@OnDragEnter"
                                                              draggable="true" />
                                                @(context.Order)
                                            </div>
                                        </MudTd>
                                    }
                                    @if (_showNameColumn)
                                    {
                                        <MudTd DataLabel="Name" Class="@rowClass">
                                            @if (string.IsNullOrEmpty(context.Name))
                                            {
                                                <MudText Typo="Typo.body2" Style="font-style: italic; color: var(--mud-palette-text-secondary);">
                                                    New Step - Click to edit
                                                </MudText>
                                            }
                                            else
                                            {
                                                @context.Name
                                            }
                                        </MudTd>
                                    }
                                    @if (_showMembersColumn)
                                    {
                                        <MudTd DataLabel="Assigned Members" Class="@rowClass">
                                            @if (context.AssignedMembers.Any())
                                            {
                                                <div style="display: flex; flex-wrap: wrap; gap: 4px;">
                                                    @foreach (var member in context.AssignedMembers.Take(3))
                                                    {
                                                        <MudChip T="string" Size="Size.Small" Color="Color.Primary">
                                                            @(string.IsNullOrEmpty(member.Name) ? "Unnamed" : member.Name)
                                                        </MudChip>
                                                    }
                                                    @if (context.AssignedMembers.Count > 3)
                                                    {
                                                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">
                                                            +@(context.AssignedMembers.Count - 3) more
                                                        </MudChip>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.caption" Style="font-style: italic;">
                                                    No members assigned
                                                </MudText>
                                            }
                                        </MudTd>
                                    }
                                    @if (_showActionsColumn)
                                    {
                                        <MudTd DataLabel="Actions" Class="@rowClass">
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                          Size="Size.Small" 
                                                          Color="Color.Primary"
                                                          OnClick="@(() => OpenStepEditor(context))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                          Size="Size.Small" 
                                                          Color="Color.Error"
                                                          OnClick="@(() => RemoveStep(context))" />
                                        </MudTd>
                                        <MudTd Class="@rowClass">
                                            <MudButton Variant="Variant.Text" 
                                                      StartIcon="@Icons.Material.Filled.TableRows" 
                                                      OnClick="@(() => _table.SetEditingItem(context))">
                                                Edit Name
                                            </MudButton>
                                        </MudTd>
                                    }
                                </RowTemplate>
                                <RowEditingTemplate>
                                    @if (_showOrderColumn)
                                    {
                                        <MudTd DataLabel="Order">
                                            <div style="display: flex; align-items: center; gap: 8px;">
                                                <MudIconButton Icon="@Icons.Material.Filled.DragIndicator" 
                                                              Size="Size.Small" 
                                                              Style="cursor: move;" 
                                                              @ondragstart="@((DragEventArgs e) => OnDragStart(e, context))"
                                                              @ondrop="@((DragEventArgs e) => OnDrop(e, context))"
                                                              @ondragover="@OnDragOver"
                                                              @ondragenter="@OnDragEnter"
                                                              draggable="true" />
                                                @(context.Order)
                                            </div>
                                        </MudTd>
                                    }
                                    @if (_showNameColumn)
                                    {
                                        <MudTd DataLabel="Name">
                                            <MudTextField @bind-Value="@context.Name" 
                                                         Required="true" 
                                                         RequiredError="Step name is required"
                                                         Variant="Variant.Text" />
                                        </MudTd>
                                    }
                                    @if (_showMembersColumn)
                                    {
                                        <MudTd DataLabel="Assigned Members">
                                            @if (context.AssignedMembers.Any())
                                            {
                                                <div style="display: flex; flex-wrap: wrap; gap: 4px;">
                                                    @foreach (var member in context.AssignedMembers.Take(3))
                                                    {
                                                        <MudChip T="string" Size="Size.Small" Color="Color.Primary">
                                                            @(string.IsNullOrEmpty(member.Name) ? "Unnamed" : member.Name)
                                                        </MudChip>
                                                    }
                                                    @if (context.AssignedMembers.Count > 3)
                                                    {
                                                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">
                                                            +@(context.AssignedMembers.Count - 3) more
                                                        </MudChip>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.caption" Style="font-style: italic;">
                                                    No members assigned
                                                </MudText>
                                            }
                                        </MudTd>
                                    }
                                    @if (_showActionsColumn)
                                    {
                                        <MudTd DataLabel="Actions">
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                          Size="Size.Small" 
                                                          Color="Color.Primary"
                                                          OnClick="@(() => OpenStepEditor(context))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                          Size="Size.Small" 
                                                          Color="Color.Error"
                                                          OnClick="@(() => RemoveStep(context))" />
                                        </MudTd>
                                        <MudTd></MudTd>
                                    }
                                </RowEditingTemplate>
                                <NoRecordsContent>
                                    <MudText Align="Align.Center" Class="pa-4">
                                        No steps yet. Press Enter to add your first step!
                                    </MudText>
                                </NoRecordsContent>
                            </MudTable>
                        
                        <div Class="d-flex gap-2 mt-3">
                            <MudButton StartIcon="@Icons.Material.Filled.Add" 
                                      Color="Color.Primary" 
                                      OnClick="@AddStep">
                                Add Step
                            </MudButton>
                            
                            <MudButton StartIcon="@Icons.Material.Filled.KeyboardArrowUp" 
                                      Color="Color.Secondary" 
                                      Variant="Variant.Outlined"
                                      OnClick="@AddStepAbove"
                                      Disabled="@(_selectedStepIndex < 0)">
                                Insert Above
                            </MudButton>
                            
                            <MudButton StartIcon="@Icons.Material.Filled.KeyboardArrowDown" 
                                      Color="Color.Secondary" 
                                      Variant="Variant.Outlined"
                                      OnClick="@AddStepBelow"
                                      Disabled="@(_selectedStepIndex < 0)">
                                Insert Below
                            </MudButton>
                        </div>
                        
                        <MudText Typo="Typo.caption" Class="mt-2">
                            💡 Press <strong>Enter</strong> to add a step, <strong>Shift+Enter</strong> to insert below, <strong>Insert</strong> to insert above
                        </MudText>
                    </MudPaper>
                </MudCardContent>
                
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="SavePlan">
                        Save Plan
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                              Color="Color.Secondary" 
                              OnClick="@(() => NavigationManager.NavigateTo("/plans"))">
                        Cancel
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudForm>
    }
</MudContainer>

@code {
    [Parameter]
    public int? Id { get; set; }
    
    private Plan _plan = new Plan();
    private bool _isNewPlan => Id == null;
    private bool _isLoading = true;
    private MudForm _form = default!;
    private MudTable<PlanStep> _table = default!;
    private PlanMember? _selectedMemberToHighlight;
    private int _selectedStepIndex = -1;
    private PlanStep _stepBeforeEdit = new();
    private PlanStep? _draggedStep;
    private IJSObjectReference? _keyboardModule;
    private DotNetObjectReference<PlanEditor>? _dotNetRef;
    
    // Column visibility settings
    private bool _showOrderColumn = true;
    private bool _showNameColumn = true;
    private bool _showMembersColumn = true;
    private bool _showActionsColumn = true;
    
    private List<PlanStep> _orderedSteps => _plan.Steps;

    protected override async Task OnInitializedAsync()
    {
        if (!_isNewPlan)
        {
            var plan = await PlanService.GetPlanAsync(Id.Value);
            if (plan != null)
            {
                _plan = plan;
                // Ensure steps have proper order if they don't
                EnsureStepOrdering();
            }
            else
            {
                NavigationManager.NavigateTo("/plans");
                Snackbar.Add("Plan not found", Severity.Error);
            }
        }
        
        _isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            _keyboardModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/keyboard-handler.js");
            await _keyboardModule.InvokeVoidAsync("setupKeyboardHandler", _dotNetRef);
        }
    }

    [JSInvokable]
    public async Task HandleKeyboardEvent(string key, bool shiftKey, bool ctrlKey, bool altKey)
    {
        // Only handle keyboard shortcuts when not in an input/textarea/contenteditable
        if (await IsTypingInInput()) return;

        switch (key)
        {
            case "Enter":
                if (shiftKey)
                {
                    AddStepBelow();
                }
                else
                {
                    AddStep();
                }
                break;
            case "Insert":
                AddStepAbove();
                break;
        }
    }

    private async Task<bool> IsTypingInInput()
    {
        try
        {
            return await _keyboardModule!.InvokeAsync<bool>("isTypingInInput");
        }
        catch
        {
            return false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_keyboardModule != null)
            {
                await _keyboardModule.InvokeVoidAsync("cleanup");
                await _keyboardModule.DisposeAsync();
            }
            _dotNetRef?.Dispose();
        }
        catch
        {
            // Ignore cleanup errors
        }
    }
    
    private void EnsureStepOrdering()
    {
        var stepsWithoutOrder = _plan.Steps.Where(s => s.Order == 0).ToList();
        if (stepsWithoutOrder.Any())
        {
            var maxOrder = _plan.Steps.Where(s => s.Order > 0).DefaultIfEmpty().Max(s => s?.Order ?? 0);
            for (int i = 0; i < stepsWithoutOrder.Count; i++)
            {
                stepsWithoutOrder[i].Order = maxOrder + i + 1;
            }
        }
        
        // Sort the collection to maintain order
        SortStepsCollection();
    }

    private void SortStepsCollection()
    {
        // Sort the collection in-place by Order
        var sortedSteps = _plan.Steps.OrderBy(s => s.Order).ToList();
        _plan.Steps.Clear();
        _plan.Steps.AddRange(sortedSteps);
    }

    private void AddStep()
    {
        var newOrder = _plan.Steps.Any() ? _plan.Steps.Max(s => s.Order) + 1 : 1;
        var newStep = new PlanStep { Order = newOrder };
        _plan.Steps.Add(newStep);
        SortStepsCollection();
        StateHasChanged();
    }
    
    private void AddStepAbove()
    {
        if (_selectedStepIndex < 0) return;
        
        var targetOrder = _orderedSteps[_selectedStepIndex].Order;
        
        // Shift orders of steps at or after the target position
        foreach (var step in _plan.Steps.Where(s => s.Order >= targetOrder))
        {
            step.Order++;
        }
        
        var newStep = new PlanStep { Order = targetOrder };
        _plan.Steps.Add(newStep);
        SortStepsCollection();
        StateHasChanged();
    }
    
    private void AddStepBelow()
    {
        if (_selectedStepIndex < 0) return;
        
        var targetOrder = _orderedSteps[_selectedStepIndex].Order + 1;
        
        // Shift orders of steps after the target position
        foreach (var step in _plan.Steps.Where(s => s.Order >= targetOrder))
        {
            step.Order++;
        }
        
        var newStep = new PlanStep { Order = targetOrder };
        _plan.Steps.Add(newStep);
        SortStepsCollection();
        StateHasChanged();
    }

    private void RemoveStep(PlanStep step)
    {
        _plan.Steps.Remove(step);
        
        // Reorder remaining steps to fill gaps
        var orderedSteps = _plan.Steps.OrderBy(s => s.Order).ToList();
        for (int i = 0; i < orderedSteps.Count; i++)
        {
            orderedSteps[i].Order = i + 1;
        }
        
        SortStepsCollection();
        StateHasChanged();
    }

    private async Task OpenStepEditor(PlanStep step)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Edit Step Details",
            $"This will open a full editor for step '{step.Name}'. For now, use the inline name editor and detailed editing will be added in a future update.",
            yesText: "OK", cancelText: null);
    }

    private bool IsStepHighlighted(PlanStep step)
    {
        if (_selectedMemberToHighlight == null)
            return false;
            
        return step.AssignedMembers.Any(m => m.Id == _selectedMemberToHighlight.Id);
    }
    
    private void BackupItem(object element)
    {
        _stepBeforeEdit = new PlanStep
        {
            Id = ((PlanStep)element).Id,
            Order = ((PlanStep)element).Order,
            Name = ((PlanStep)element).Name,
            Summary = ((PlanStep)element).Summary,
            Screenshot = ((PlanStep)element).Screenshot,
            AssignedMembers = new List<PlanMember>(((PlanStep)element).AssignedMembers)
        };
    }

    private void ResetItemToOriginalValues(object element)
    {
        var step = (PlanStep)element;
        step.Name = _stepBeforeEdit.Name;
        step.Summary = _stepBeforeEdit.Summary;
        step.Screenshot = _stepBeforeEdit.Screenshot;
        step.AssignedMembers = _stepBeforeEdit.AssignedMembers;
    }

    private void ItemHasBeenCommitted(object element)
    {
        // Nothing special needed here as the item is already updated
    }

    // Drag and Drop functionality
    private void OnDragStart(DragEventArgs e, PlanStep step)
    {
        _draggedStep = step;
        e.DataTransfer.EffectAllowed = "move";
    }

    private void OnDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "move";
    }

    private void OnDragEnter(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "move";
    }

    private void OnDrop(DragEventArgs e, PlanStep targetStep)
    {
        if (_draggedStep != null && _draggedStep != targetStep)
        {
            var draggedOrder = _draggedStep.Order;
            var targetOrder = targetStep.Order;

            if (draggedOrder < targetOrder)
            {
                // Moving down - shift items between draggedOrder and targetOrder up
                foreach (var step in _plan.Steps.Where(s => s.Order > draggedOrder && s.Order <= targetOrder))
                {
                    step.Order--;
                }
            }
            else if (draggedOrder > targetOrder)
            {
                // Moving up - shift items between targetOrder and draggedOrder down
                foreach (var step in _plan.Steps.Where(s => s.Order >= targetOrder && s.Order < draggedOrder))
                {
                    step.Order++;
                }
            }

            _draggedStep.Order = targetOrder;
            _draggedStep = null;
            SortStepsCollection();
            StateHasChanged();
        }
    }

    private async Task SavePlan()
    {
        await _form.Validate();
        
        if (_form.IsValid)
        {
            // Ensure all steps have names
            var stepsWithoutNames = _plan.Steps.Where(s => string.IsNullOrWhiteSpace(s.Name)).ToList();
            if (stepsWithoutNames.Any())
            {
                Snackbar.Add("All steps must have names before saving", Severity.Warning);
                return;
            }
            
            if (_isNewPlan)
            {
                await PlanService.CreatePlanAsync(_plan);
                Snackbar.Add("Plan created successfully", Severity.Success);
            }
            else
            {
                await PlanService.UpdatePlanAsync(_plan);
                Snackbar.Add("Plan updated successfully", Severity.Success);
            }
            
            NavigationManager.NavigateTo("/plans");
        }
    }
}