@page "/plans/new"
@page "/plans/{Id:int}"
@using StepCue.TenantApp.Core.Services
@using StepCue.TenantApp.Data.Models.Planning
@using StepCue.TenantApp.Web.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject PlanService PlanService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<style>
    .highlighted-step {
        background-color: var(--mud-palette-primary-lighten) !important;
        border: 2px solid var(--mud-palette-primary) !important;
        border-radius: 8px;
    }
    
    .step-table {
        min-height: 300px;
    }
    
    .inline-edit {
        background: transparent;
        border: none;
        outline: none;
        width: 100%;
        padding: 4px;
    }
    
    .inline-edit:focus {
        background: var(--mud-palette-surface);
        border: 1px solid var(--mud-palette-primary);
        border-radius: 4px;
    }
</style>

<PageTitle>@(_isNewPlan ? "Create Plan" : "Edit Plan")</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">@(_isNewPlan ? "Create Plan" : "Edit Plan")</MudText>
    
    @if (_isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudForm Model="@_plan" @ref="_form">
            <MudCard Elevation="0">
                <MudCardContent>
                    <div Class="d-flex gap-3 align-center mb-3">
                        <MudTextField @bind-Value="_plan.Name" Label="Plan Name" Required="true" RequiredError="Plan name is required" Class="flex-grow-1" />
                        <MudButton Variant="Variant.Outlined" 
                                  Color="Color.Secondary" 
                                  StartIcon="@Icons.Material.Filled.MoreHoriz"
                                  OnClick="OpenPlanDetailsDialog">
                            More Details
                        </MudButton>
                    </div>
                    
                    <MudText Typo="Typo.h6" Class="mt-4">Members</MudText>
                    <MemberManager Members="@_plan.Members" />
                    
                    <MudText Typo="Typo.h6" Class="mt-4">Steps</MudText>
                    
                    @if (_plan.Members.Any())
                    {
                        <MudPaper Class="pa-2 mt-2 mb-2" Elevation="1">
                            <MudSelect T="PlanMember" @bind-Value="_selectedMemberToHighlight" 
                                       Label="Highlight steps for member" 
                                       Variant="Variant.Outlined" 
                                       Clearable="true"
                                       ToStringFunc="@(m => string.IsNullOrEmpty(m?.Name) ? "Unnamed Member" : m.Name)">
                                @foreach (var member in _plan.Members)
                                {
                                    var memberName = string.IsNullOrEmpty(member.Name) ? "Unnamed Member" : member.Name;
                                    <MudSelectItem T="PlanMember" Value="@member">@memberName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudPaper>
                    }
                    
                    <MudPaper Class="pa-4 mt-2" Elevation="0">
                        <div Class="d-flex justify-space-between align-center mb-3">
                            <MudText Typo="Typo.h6">Steps Table</MudText>
                            <MudMenu EndIcon="@Icons.Material.Filled.Visibility" 
                                    Label="Column Visibility" 
                                    Variant="Variant.Outlined" 
                                    Size="Size.Small">
                                <MudMenuItem>
                                    <MudCheckBox T="bool" @bind-Checked="_showOrderColumn" 
                                                Label="Order" 
                                                Size="Size.Small" />
                                </MudMenuItem>
                                <MudMenuItem>
                                    <MudCheckBox T="bool" @bind-Checked="_showNameColumn" 
                                                Label="Name" 
                                                Size="Size.Small" />
                                </MudMenuItem>
                                <MudMenuItem>
                                    <MudCheckBox T="bool" @bind-Checked="_showStepTypeColumn" 
                                                Label="Step Type" 
                                                Size="Size.Small" />
                                </MudMenuItem>
                                <MudMenuItem>
                                    <MudCheckBox T="bool" @bind-Checked="_showMembersColumn" 
                                                Label="Assigned Members" 
                                                Size="Size.Small" />
                                </MudMenuItem>
                                <MudMenuItem>
                                    <MudCheckBox T="bool" @bind-Checked="_showActionsColumn" 
                                                Label="Actions" 
                                                Size="Size.Small" />
                                </MudMenuItem>
                            </MudMenu>
                        </div>
                        
                        <MudTable Items="@_orderedSteps" 
                                 Hover="true" 
                                 Breakpoint="Breakpoint.Sm"
                                 Class="step-table">
                                <ColGroup>
                                    <col style="width: 80px;" />
                                    <col />
                                    <col style="width: 120px;" />
                                    <col style="width: 250px;" />
                                    <col style="width: 120px;" />
                                </ColGroup>
                                <HeaderContent>
                                    @if (_showOrderColumn)
                                    {
                                        <MudTh>Order</MudTh>
                                    }
                                    @if (_showNameColumn)
                                    {
                                        <MudTh>Name</MudTh>
                                    }
                                    @if (_showStepTypeColumn)
                                    {
                                        <MudTh>Type</MudTh>
                                    }
                                    @if (_showMembersColumn)
                                    {
                                        <MudTh>Assigned Members</MudTh>
                                    }
                                    @if (_showActionsColumn)
                                    {
                                        <MudTh>Actions</MudTh>
                                    }
                                </HeaderContent>
                                <RowTemplate>
                                    @{
                                        var isHighlighted = IsStepHighlighted(context);
                                        var rowClass = isHighlighted ? "highlighted-step" : "";
                                        var stepIndex = _orderedSteps.IndexOf(context);
                                    }
                                    @if (_showOrderColumn)
                                    {
                                        <MudTd DataLabel="Order" Class="@rowClass">
                                            <div style="display: flex; align-items: center; gap: 4px;">
                                                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" 
                                                              Size="Size.Small" 
                                                              Color="Color.Primary"
                                                              Disabled="@(stepIndex == 0)"
                                                              OnClick="@(() => MoveStepUp(context))" />
                                                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown" 
                                                              Size="Size.Small" 
                                                              Color="Color.Primary"
                                                              Disabled="@(stepIndex == _orderedSteps.Count - 1)"
                                                              OnClick="@(() => MoveStepDown(context))" />
                                                <MudText Typo="Typo.body2">@(context.Order)</MudText>
                                            </div>
                                        </MudTd>
                                    }
                                    @if (_showNameColumn)
                                    {
                                        <MudTd DataLabel="Name" Class="@rowClass">
                                            <MudTextField @bind-Value="@context.Name" 
                                                         Label="Step Name"
                                                         Placeholder="Enter step name..."
                                                         Variant="Variant.Outlined"
                                                         Margin="Margin.Dense"
                                                         FullWidth="true" />
                                        </MudTd>
                                    }
                                    @if (_showStepTypeColumn)
                                    {
                                        <MudTd DataLabel="Type" Class="@rowClass">
                                            <MudSelect T="StepType" @bind-Value="@context.StepType"
                                                      Label="Step Type"
                                                      Variant="Variant.Outlined"
                                                      Margin="Margin.Dense">
                                                <MudSelectItem T="StepType" Value="@StepType.Execution">Execution</MudSelectItem>
                                                <MudSelectItem T="StepType" Value="@StepType.GoNoGo">Go/NoGo</MudSelectItem>
                                            </MudSelect>
                                        </MudTd>
                                    }
                                    @if (_showMembersColumn)
                                    {
                                        <MudTd DataLabel="Assigned Members" Class="@rowClass">
                                            <MudSelect T="PlanMember" 
                                                      MultiSelection="true" 
                                                      SelectedValues="@context.AssignedMembers"
                                                      SelectedValuesChanged="@((IEnumerable<PlanMember> values) => context.AssignedMembers = values.ToList())"
                                                      Label="Assign Members"
                                                      Variant="Variant.Outlined"
                                                      Margin="Margin.Dense"
                                                      ToStringFunc="@(m => string.IsNullOrEmpty(m?.Name) ? "Unnamed Member" : m.Name)">
                                                @foreach (var member in _plan.Members)
                                                {
                                                    var memberName = string.IsNullOrEmpty(member.Name) ? "Unnamed Member" : member.Name;
                                                    <MudSelectItem T="PlanMember" Value="@member">@memberName</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudTd>
                                    }
                                    @if (_showActionsColumn)
                                    {
                                        <MudTd DataLabel="Actions" Class="@rowClass">
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                          Size="Size.Small" 
                                                          Color="Color.Error"
                                                          OnClick="@(() => RemoveStep(context))" />
                                        </MudTd>
                                    }
                                </RowTemplate>
                                <NoRecordsContent>
                                    <MudText Align="Align.Center" Class="pa-4">
                                        No steps yet. Click "Add Step" to get started!
                                    </MudText>
                                </NoRecordsContent>
                            </MudTable>
                        
                        <div Class="d-flex gap-2 mt-3">
                            <MudButton StartIcon="@Icons.Material.Filled.Add" 
                                      Color="Color.Primary" 
                                      OnClick="@AddStep">
                                Add Step
                            </MudButton>
                        </div>
                    </MudPaper>
                </MudCardContent>
                
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="SavePlan">
                        Save Plan
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                              Color="Color.Secondary" 
                              OnClick="@(() => NavigationManager.NavigateTo("/plans"))">
                        Cancel
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudForm>
    }
</MudContainer>

<!-- Plan Details Dialog -->
<MudDialog @bind-Visible="_planDetailsDialogVisible" Options="@(new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true })">
    <TitleContent>
        <MudText Typo="Typo.h5">Plan Details</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="_plan.Description" 
                     Label="Description" 
                     Lines="4" 
                     Class="mb-3" 
                     Placeholder="Enter a detailed description of this plan..." />
        
        <MudText Typo="Typo.subtitle2" Class="mb-2">Plan Screenshot</MudText>
        <ScreenshotUploader @bind-ImageData="_plan.Screenshot" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ClosePlanDetailsDialog">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public int? Id { get; set; }
    
    private Plan _plan = new Plan();
    private bool _isNewPlan => Id == null;
    private bool _isLoading = true;
    private MudForm _form = default!;
    private PlanMember? _selectedMemberToHighlight;
    
    // Column visibility settings
    private bool _showOrderColumn = true;
    private bool _showNameColumn = true;
    private bool _showStepTypeColumn = true;
    private bool _showMembersColumn = true;
    private bool _showActionsColumn = true;
    
    private List<PlanStep> _orderedSteps => _plan.Steps;
    private bool _planDetailsDialogVisible = false;

    protected override async Task OnInitializedAsync()
    {
        if (!_isNewPlan)
        {
            var plan = await PlanService.GetPlanAsync(Id.Value);
            if (plan != null)
            {
                _plan = plan;
                // Ensure steps have proper order if they don't
                EnsureStepOrdering();
            }
            else
            {
                NavigationManager.NavigateTo("/plans");
                Snackbar.Add("Plan not found", Severity.Error);
            }
        }
        
        _isLoading = false;
    }
    
    private void EnsureStepOrdering()
    {
        var stepsWithoutOrder = _plan.Steps.Where(s => s.Order == 0).ToList();
        if (stepsWithoutOrder.Any())
        {
            var maxOrder = _plan.Steps.Where(s => s.Order > 0).DefaultIfEmpty().Max(s => s?.Order ?? 0);
            for (int i = 0; i < stepsWithoutOrder.Count; i++)
            {
                stepsWithoutOrder[i].Order = maxOrder + i + 1;
            }
        }
        
        // Sort the collection to maintain order
        SortStepsCollection();
    }

    private void SortStepsCollection()
    {
        // Sort the collection in-place by Order
        var sortedSteps = _plan.Steps.OrderBy(s => s.Order).ToList();
        _plan.Steps.Clear();
        _plan.Steps.AddRange(sortedSteps);
    }

    private void AddStep()
    {
        var newOrder = _plan.Steps.Any() ? _plan.Steps.Max(s => s.Order) + 1 : 1;
        var newStep = new PlanStep { Order = newOrder };
        _plan.Steps.Add(newStep);
        SortStepsCollection();
        StateHasChanged();
    }

    private void MoveStepUp(PlanStep step)
    {
        var currentIndex = _orderedSteps.IndexOf(step);
        if (currentIndex > 0)
        {
            var previousStep = _orderedSteps[currentIndex - 1];
            
            // Swap the orders
            var tempOrder = step.Order;
            step.Order = previousStep.Order;
            previousStep.Order = tempOrder;
            
            SortStepsCollection();
            StateHasChanged();
        }
    }

    private void MoveStepDown(PlanStep step)
    {
        var currentIndex = _orderedSteps.IndexOf(step);
        if (currentIndex < _orderedSteps.Count - 1)
        {
            var nextStep = _orderedSteps[currentIndex + 1];
            
            // Swap the orders
            var tempOrder = step.Order;
            step.Order = nextStep.Order;
            nextStep.Order = tempOrder;
            
            SortStepsCollection();
            StateHasChanged();
        }
    }

    private void RemoveStep(PlanStep step)
    {
        _plan.Steps.Remove(step);
        
        // Reorder remaining steps to fill gaps
        var orderedSteps = _plan.Steps.OrderBy(s => s.Order).ToList();
        for (int i = 0; i < orderedSteps.Count; i++)
        {
            orderedSteps[i].Order = i + 1;
        }
        
        SortStepsCollection();
        StateHasChanged();
    }

    private bool IsStepHighlighted(PlanStep step)
    {
        if (_selectedMemberToHighlight == null)
            return false;
            
        return step.AssignedMembers.Any(m => m.Id == _selectedMemberToHighlight.Id);
    }

    private async Task SavePlan()
    {
        await _form.Validate();
        
        if (_form.IsValid)
        {
            // Ensure all steps have names
            var stepsWithoutNames = _plan.Steps.Where(s => string.IsNullOrWhiteSpace(s.Name)).ToList();
            if (stepsWithoutNames.Any())
            {
                Snackbar.Add("All steps must have names before saving", Severity.Warning);
                return;
            }
            
            if (_isNewPlan)
            {
                await PlanService.CreatePlanAsync(_plan);
                Snackbar.Add("Plan created successfully", Severity.Success);
            }
            else
            {
                await PlanService.UpdatePlanAsync(_plan);
                Snackbar.Add("Plan updated successfully", Severity.Success);
            }
            
            NavigationManager.NavigateTo("/plans");
        }
    }

    private void OpenPlanDetailsDialog()
    {
        _planDetailsDialogVisible = true;
    }

    private void ClosePlanDetailsDialog()
    {
        _planDetailsDialogVisible = false;
    }
}