using Microsoft.EntityFrameworkCore;
using StepCue.TenantApp.Core.Services;
using StepCue.TenantApp.Data.Models.Execution;
using StepCue.TenantApp.Data.Models.Planning;
using Xunit;

namespace StepCue.TenantApp.Core.Tests.Services
{
    public class ExecutionServiceTests : TestBase
    {
        private readonly ExecutionService _executionService;

        public ExecutionServiceTests()
        {
            _executionService = new ExecutionService(Context);
        }

        [Fact]
        public async Task GetExecutionsQueryable_ShouldIncludeAllRelatedData()
        {
            // Arrange
            var plan = new Plan 
            { 
                Name = "Test Plan",
                Steps = new List<PlanStep> { new PlanStep { Name = "Plan Step" } },
                Members = new List<PlanMember> { new PlanMember { Name = "Plan Member" } }
            };

            Context.Plans.Add(plan);
            await Context.SaveChangesAsync();

            var execution = new Execution
            {
                Name = "Test Execution",
                PlanId = plan.Id,
                Plan = plan,
                Steps = new List<ExecutionStep>
                {
                    new ExecutionStep
                    {
                        Name = "Execution Step",
                        Summary = "Step summary",
                        AssignedMembers = new List<PlanMember>
                        {
                            new ExecutionMember { Name = "Assigned Member", EmailAddress = "assigned@test.com" }
                        }
                    }
                },
                Members = new List<ExecutionMember>
                {
                    new ExecutionMember { Name = "Execution Member", EmailAddress = "member@test.com" }
                }
            };

            Context.Executions.Add(execution);
            await Context.SaveChangesAsync();

            // Act
            var queryable = _executionService.GetExecutionsQueryable();
            var result = await queryable.ToListAsync();

            // Assert
            Assert.Single(result);
            var executionResult = result.First();
            
            // Verify Plan is loaded
            Assert.NotNull(executionResult.Plan);
            Assert.Equal("Test Plan", executionResult.Plan.Name);
            
            // Verify Steps are loaded
            Assert.Single(executionResult.Steps);
            Assert.Equal("Execution Step", executionResult.Steps.First().Name);
            
            // Verify Steps.AssignedMembers are loaded (ThenInclude)
            Assert.Single(executionResult.Steps.First().AssignedMembers);
            Assert.Equal("Assigned Member", executionResult.Steps.First().AssignedMembers.First().Name);
        }

        [Fact]
        public async Task GetExecutionsQueryable_VerifyIncludeStatements()
        {
            // This test specifically verifies that the Include statements in GetExecutionsQueryable 
            // are working correctly to load all necessary related data

            // Arrange
            var plan = new Plan { Name = "Test Plan" };
            Context.Plans.Add(plan);
            await Context.SaveChangesAsync();

            var executionMember = new ExecutionMember { Name = "Test Member", EmailAddress = "test@test.com" };
            var execution = new Execution
            {
                Name = "Test Execution",
                PlanId = plan.Id,
                Plan = plan,
                Members = new List<ExecutionMember> { executionMember },
                Steps = new List<ExecutionStep>
                {
                    new ExecutionStep
                    {
                        Name = "Step 1",
                        AssignedMembers = new List<PlanMember> { executionMember } // Assigning execution member to step
                    }
                }
            };

            Context.Executions.Add(execution);
            await Context.SaveChangesAsync();

            // Act - Use GetExecutionsQueryable which should include Plan, Steps.ThenInclude(AssignedMembers)
            var queryable = _executionService.GetExecutionsQueryable();
            var results = await queryable.ToListAsync();

            // Assert
            Assert.Single(results);
            var result = results.First();

            // Test that Plan relationship is included
            Assert.NotNull(result.Plan);
            Assert.Equal("Test Plan", result.Plan.Name);

            // Test that Steps relationship is included
            Assert.Single(result.Steps);
            var step = result.Steps.First();
            Assert.Equal("Step 1", step.Name);

            // Test that Steps.AssignedMembers relationship is included via ThenInclude
            Assert.Single(step.AssignedMembers);
            Assert.Equal("Test Member", step.AssignedMembers.First().Name);
        }

        [Fact]
        public async Task GetExecutionsQueryable_BugDemonstration_ExecutionMembersNotIncluded()
        {
            // This test demonstrates a potential bug where Execution.Members are not included 
            // in the GetExecutionsQueryable method

            // Arrange
            var plan = new Plan { Name = "Test Plan" };
            Context.Plans.Add(plan);
            await Context.SaveChangesAsync();

            var execution = new Execution
            {
                Name = "Test Execution",
                PlanId = plan.Id,
                Plan = plan,
                Members = new List<ExecutionMember>
                {
                    new ExecutionMember { Name = "Member 1", EmailAddress = "member1@test.com" },
                    new ExecutionMember { Name = "Member 2", EmailAddress = "member2@test.com" }
                }
            };

            Context.Executions.Add(execution);
            await Context.SaveChangesAsync();

            // Clear context to force fresh load
            Context.ChangeTracker.Clear();

            // Act - Use GetExecutionsQueryable
            var queryable = _executionService.GetExecutionsQueryable();
            var results = await queryable.Where(e => e.Id == execution.Id).ToListAsync();

            // Assert
            Assert.Single(results);
            var result = results.First();

            // BUG: Execution.Members are not included in GetExecutionsQueryable
            // So when we load fresh, the Members collection will be empty
            Assert.Empty(result.Members); // This demonstrates the bug

            // What SHOULD happen (if Members were included):
            // Assert.Equal(2, result.Members.Count);
            // Assert.Contains(result.Members, m => m.Name == "Member 1");
            // Assert.Contains(result.Members, m => m.Name == "Member 2");
        }
        }

        [Fact]
        public async Task GetExecutionAsync_ShouldReturnExecutionWithAllRelatedData()
        {
            // Arrange
            var plan = new Plan { Name = "Test Plan" };
            Context.Plans.Add(plan);
            await Context.SaveChangesAsync();

            var execution = new Execution
            {
                Name = "Test Execution",
                PlanId = plan.Id,
                Plan = plan,
                Steps = new List<ExecutionStep>
                {
                    new ExecutionStep
                    {
                        Name = "Step 1",
                        AssignedMembers = new List<PlanMember>
                        {
                            new ExecutionMember { Name = "Member 1" }
                        }
                    }
                }
            };

            Context.Executions.Add(execution);
            await Context.SaveChangesAsync();

            // Act
            var result = await _executionService.GetExecutionAsync(execution.Id);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("Test Execution", result.Name);
            Assert.NotNull(result.Plan);
            Assert.Equal("Test Plan", result.Plan.Name);
            Assert.Single(result.Steps);
            Assert.Equal("Step 1", result.Steps.First().Name);
            Assert.Single(result.Steps.First().AssignedMembers);
            Assert.Equal("Member 1", result.Steps.First().AssignedMembers.First().Name);
        }

        [Fact]
        public async Task GetExecutionAsync_WithNonExistentId_ShouldReturnNull()
        {
            // Act
            var result = await _executionService.GetExecutionAsync(999);

            // Assert
            Assert.Null(result);
        }

        [Fact]
        public async Task CreateExecutionFromPlanAsync_ShouldCreateExecutionWithAllPlanData()
        {
            // Arrange
            var plan = new Plan
            {
                Name = "Source Plan",
                Steps = new List<PlanStep>
                {
                    new PlanStep { Name = "Plan Step 1", Summary = "Step 1 summary", Screenshot = new byte[] { 1, 2, 3 } },
                    new PlanStep { Name = "Plan Step 2", Summary = "Step 2 summary", Screenshot = new byte[] { 4, 5, 6 } }
                },
                Members = new List<PlanMember>
                {
                    new PlanMember { Name = "Plan Member 1", EmailAddress = "member1@test.com" },
                    new PlanMember { Name = "Plan Member 2", EmailAddress = "member2@test.com" }
                }
            };

            Context.Plans.Add(plan);
            await Context.SaveChangesAsync();

            // Act
            var result = await _executionService.CreateExecutionFromPlanAsync(plan.Id);

            // Assert
            Assert.NotNull(result);
            Assert.Equal($"Execution of {plan.Name}", result.Name);
            Assert.Equal(plan.Id, result.PlanId);
            Assert.NotNull(result.Plan);
            Assert.Equal(plan.Name, result.Plan.Name);

            // Verify members were copied correctly
            Assert.Equal(2, result.Members.Count);
            Assert.Contains(result.Members, m => m.Name == "Plan Member 1" && m.EmailAddress == "member1@test.com");
            Assert.Contains(result.Members, m => m.Name == "Plan Member 2" && m.EmailAddress == "member2@test.com");

            // Verify steps were copied correctly
            Assert.Equal(2, result.Steps.Count);
            Assert.Contains(result.Steps, s => s.Name == "Plan Step 1" && s.Summary == "Step 1 summary");
            Assert.Contains(result.Steps, s => s.Name == "Plan Step 2" && s.Summary == "Step 2 summary");

            // Verify screenshots were copied
            var step1 = result.Steps.FirstOrDefault(s => s.Name == "Plan Step 1");
            Assert.NotNull(step1);
            Assert.NotNull(step1.Screenshot);
            Assert.Equal(new byte[] { 1, 2, 3 }, step1.Screenshot);

            // Verify execution was saved to database
            var savedExecution = await Context.Executions
                .Include(e => e.Steps)
                .Include(e => e.Members)
                .Include(e => e.Plan)
                .FirstOrDefaultAsync(e => e.Id == result.Id);

            Assert.NotNull(savedExecution);
            Assert.Equal(2, savedExecution.Steps.Count);
            Assert.Equal(2, savedExecution.Members.Count);
        }

        [Fact]
        public async Task CreateExecutionFromPlanAsync_WithNonExistentPlan_ShouldReturnNull()
        {
            // Act
            var result = await _executionService.CreateExecutionFromPlanAsync(999);

            // Assert
            Assert.Null(result);
        }

        [Fact]
        public async Task UpdateExecutionStepAsync_ShouldUpdateStep()
        {
            // Arrange
            var plan = new Plan { Name = "Test Plan" };
            Context.Plans.Add(plan);
            await Context.SaveChangesAsync();

            var execution = new Execution
            {
                Name = "Test Execution",
                PlanId = plan.Id,
                Plan = plan,
                Steps = new List<ExecutionStep>
                {
                    new ExecutionStep
                    {
                        Name = "Original Step",
                        Summary = "Original summary",
                        ResultSummary = "Original result"
                    }
                }
            };

            Context.Executions.Add(execution);
            await Context.SaveChangesAsync();

            var stepToUpdate = execution.Steps.First();
            stepToUpdate.Name = "Updated Step";
            stepToUpdate.Summary = "Updated summary";
            stepToUpdate.ResultSummary = "Updated result";
            stepToUpdate.StartedOn = DateTime.Now;
            stepToUpdate.CompleteOn = DateTime.Now.AddHours(1);

            // Act
            var result = await _executionService.UpdateExecutionStepAsync(stepToUpdate);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("Updated Step", result.Name);
            Assert.Equal("Updated summary", result.Summary);
            Assert.Equal("Updated result", result.ResultSummary);

            // Verify in database
            var savedStep = await Context.ExecutionSteps.FindAsync(stepToUpdate.Id);
            Assert.NotNull(savedStep);
            Assert.Equal("Updated Step", savedStep.Name);
            Assert.Equal("Updated summary", savedStep.Summary);
            Assert.Equal("Updated result", savedStep.ResultSummary);
            Assert.NotNull(savedStep.StartedOn);
            Assert.NotNull(savedStep.CompleteOn);
        }

        [Fact]
        public async Task AddMessageToStepAsync_ShouldAddMessage()
        {
            // Arrange
            var plan = new Plan { Name = "Test Plan" };
            Context.Plans.Add(plan);
            await Context.SaveChangesAsync();

            var execution = new Execution
            {
                Name = "Test Execution",
                PlanId = plan.Id,
                Plan = plan,
                Steps = new List<ExecutionStep>
                {
                    new ExecutionStep { Name = "Test Step" }
                },
                Members = new List<ExecutionMember>
                {
                    new ExecutionMember { Name = "Test Author", EmailAddress = "author@test.com" }
                }
            };

            Context.Executions.Add(execution);
            await Context.SaveChangesAsync();

            var message = new ExecutionStepMessage
            {
                ExecutionStepId = execution.Steps.First().Id,
                ExecutionStep = execution.Steps.First(),
                AuthorId = execution.Members.First().Id,
                Author = execution.Members.First(),
                Message = "Test message",
                CreatedOn = DateTime.Now
            };

            // Act
            var result = await _executionService.AddMessageToStepAsync(message);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("Test message", result.Message);
            Assert.True(result.Id > 0);

            // Verify in database
            var savedMessage = await Context.ExecutionStepMessages
                .Include(m => m.Author)
                .Include(m => m.ExecutionStep)
                .FirstOrDefaultAsync(m => m.Id == result.Id);

            Assert.NotNull(savedMessage);
            Assert.Equal("Test message", savedMessage.Message);
            Assert.NotNull(savedMessage.Author);
            Assert.Equal("Test Author", savedMessage.Author.Name);
            Assert.NotNull(savedMessage.ExecutionStep);
            Assert.Equal("Test Step", savedMessage.ExecutionStep.Name);
        }

        [Fact]
        public async Task ExecutionStep_Messages_ShouldBeLoadedCorrectly()
        {
            // Arrange
            var plan = new Plan { Name = "Test Plan" };
            Context.Plans.Add(plan);
            await Context.SaveChangesAsync();

            var execution = new Execution
            {
                Name = "Test Execution",
                PlanId = plan.Id,
                Plan = plan,
                Members = new List<ExecutionMember>
                {
                    new ExecutionMember { Name = "Author 1", EmailAddress = "author1@test.com" },
                    new ExecutionMember { Name = "Author 2", EmailAddress = "author2@test.com" }
                },
                Steps = new List<ExecutionStep>
                {
                    new ExecutionStep 
                    { 
                        Name = "Test Step",
                        Messages = new List<ExecutionStepMessage>()
                    }
                }
            };

            Context.Executions.Add(execution);
            await Context.SaveChangesAsync();

            // Add messages to the step
            var step = execution.Steps.First();
            var message1 = new ExecutionStepMessage
            {
                ExecutionStepId = step.Id,
                ExecutionStep = step,
                AuthorId = execution.Members.First().Id,
                Author = execution.Members.First(),
                Message = "First message"
            };

            var message2 = new ExecutionStepMessage
            {
                ExecutionStepId = step.Id,
                ExecutionStep = step,
                AuthorId = execution.Members.Last().Id,
                Author = execution.Members.Last(),
                Message = "Second message"
            };

            Context.ExecutionStepMessages.AddRange(message1, message2);
            await Context.SaveChangesAsync();

            // Act - Load execution with all nested relationships
            var loadedExecution = await Context.Executions
                .Include(e => e.Steps)
                .ThenInclude(s => s.Messages)
                .ThenInclude(m => m.Author)
                .FirstOrDefaultAsync(e => e.Id == execution.Id);

            // Assert
            Assert.NotNull(loadedExecution);
            Assert.Single(loadedExecution.Steps);
            
            var loadedStep = loadedExecution.Steps.First();
            Assert.Equal(2, loadedStep.Messages.Count);
            
            Assert.Contains(loadedStep.Messages, m => m.Message == "First message" && m.Author.Name == "Author 1");
            Assert.Contains(loadedStep.Messages, m => m.Message == "Second message" && m.Author.Name == "Author 2");
        }

        [Fact]
        public async Task CreateExecutionFromPlanAsync_ShouldNotCopyAssignedMembersFromPlanSteps()
        {
            // Arrange
            var member1 = new PlanMember { Name = "Member 1", EmailAddress = "member1@test.com" };
            var member2 = new PlanMember { Name = "Member 2", EmailAddress = "member2@test.com" };

            var plan = new Plan
            {
                Name = "Test Plan",
                Members = new List<PlanMember> { member1, member2 },
                Steps = new List<PlanStep>
                {
                    new PlanStep
                    {
                        Name = "Plan Step",
                        AssignedMembers = new List<PlanMember> { member1, member2 }
                    }
                }
            };

            Context.Plans.Add(plan);
            await Context.SaveChangesAsync();

            // Act
            var result = await _executionService.CreateExecutionFromPlanAsync(plan.Id);

            // Assert
            Assert.NotNull(result);
            Assert.Single(result.Steps);
            
            // NOTE: Based on the current implementation, AssignedMembers are NOT copied from PlanStep to ExecutionStep
            // This might be a bug or intended behavior that the test will reveal
            var executionStep = result.Steps.First();
            Assert.Empty(executionStep.AssignedMembers);
        }

        [Fact]
        public async Task CreateExecutionFromPlanAsync_BugDemonstration_AssignedMembersNotCopied()
        {
            // This test demonstrates a potential bug where AssignedMembers from PlanStep 
            // are not copied to ExecutionStep during execution creation

            // Arrange
            var member1 = new PlanMember { Name = "Member 1", EmailAddress = "member1@test.com" };
            var member2 = new PlanMember { Name = "Member 2", EmailAddress = "member2@test.com" };

            var plan = new Plan
            {
                Name = "Test Plan",
                Members = new List<PlanMember> { member1, member2 },
                Steps = new List<PlanStep>
                {
                    new PlanStep
                    {
                        Name = "Step 1",
                        Summary = "Step with assigned members",
                        AssignedMembers = new List<PlanMember> { member1 }
                    },
                    new PlanStep
                    {
                        Name = "Step 2", 
                        Summary = "Step with multiple assigned members",
                        AssignedMembers = new List<PlanMember> { member1, member2 }
                    }
                }
            };

            Context.Plans.Add(plan);
            await Context.SaveChangesAsync();

            // Act
            var result = await _executionService.CreateExecutionFromPlanAsync(plan.Id);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(2, result.Steps.Count);

            // Get execution with full relationships loaded
            var fullExecution = await Context.Executions
                .Include(e => e.Steps)
                .ThenInclude(s => s.AssignedMembers)
                .Include(e => e.Members)
                .FirstOrDefaultAsync(e => e.Id == result.Id);

            Assert.NotNull(fullExecution);
            
            // BUG: The AssignedMembers from PlanStep are not copied to ExecutionStep
            // All ExecutionSteps should have empty AssignedMembers lists
            foreach (var step in fullExecution.Steps)
            {
                Assert.Empty(step.AssignedMembers); // This demonstrates the bug
            }

            // What SHOULD happen (if this were fixed):
            // var step1 = fullExecution.Steps.FirstOrDefault(s => s.Name == "Step 1");
            // Assert.Single(step1.AssignedMembers);
            // var step2 = fullExecution.Steps.FirstOrDefault(s => s.Name == "Step 2");
            // Assert.Equal(2, step2.AssignedMembers.Count);
        }
    }
}